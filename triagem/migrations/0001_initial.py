# Generated by Django 5.2.1 on 2025-08-30 21:59

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nome_completo', models.CharField(max_length=255)),
                ('cpf', models.CharField(max_length=11, unique=True)),
                ('tipo_usuario', models.CharField(choices=[('ATENDENTE', 'Atendente'), ('MEDICO', 'Médico'), ('ADMIN', 'Admin')], default='ATENDENTE', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Paciente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('idade', models.CharField(max_length=3)),
                ('sexo', models.CharField(choices=[('Masculino', 'Masculino'), ('Feminino', 'Feminino')], max_length=50)),
                ('cpf', models.CharField(max_length=11, unique=True)),
                ('convenio', models.CharField(choices=[('SUS', 'SUS'), ('Unimed', 'Unimed'), ('Hapvida', 'Hapvida'), ('Amil', 'Amil'), ('Bradesco Saude', 'Bradesco Saude')], max_length=50)),
                ('hora_chegada', models.TimeField(auto_now_add=True)),
                ('temperatura', models.FloatField(max_length=3)),
                ('pressao_sistolica', models.CharField(max_length=3)),
                ('pressao_diastolica', models.CharField(max_length=3)),
                ('pulso', models.CharField(max_length=3)),
                ('frequenciaRespiratoria', models.CharField(max_length=3)),
                ('saturacao', models.CharField(max_length=3)),
                ('glicemia', models.CharField(max_length=3)),
                ('dor', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('queixa', models.CharField(max_length=1000)),
                ('inicio_sintomas', models.DateField(blank=True, null=True)),
                ('sintomas_associados', models.CharField(choices=[('Dor_Toracica', 'Dor Torácica / Aperto no Peito'), ('Falta_de_Ar', 'Falta de Ar / Dificuldade para Respirar'), ('Alteracao_Neurologica_Grave', 'Alteração de Consciência / Convulsão / Confusão'), ('Sangramento_Ativo', 'Sangramento Ativo / Vômito ou Fezes com Sangue'), ('Febre', 'Febre / Calafrios'), ('Dor_de_Cabeca', 'Dor de Cabeça'), ('Tontura_MalEstar', 'Tontura / Fraqueza / Mal-estar Geral'), ('Sintomas_Respiratorios_Leves', 'Tosse / Espirros / Dor de Garganta'), ('Dor_Abdominal', 'Dor Abdominal / Cólica'), ('Sintomas_Gastrointestinais', 'Náusea / Vômito / Diarreia'), ('Lesao_Trauma', 'Lesão / Trauma / Queda Recente'), ('Dor_Locomotora', 'Dor Muscular / Articular / Lombar'), ('Reacao_Alergica_Pele', 'Reação Alérgica / Erupção na Pele / Inchaço'), ('Queixa_Urinaria', 'Queixa Urinária (Dor ao urinar / Sangue na urina)'), ('Outro', 'Outro')], max_length=50)),
                ('observacoes', models.CharField(blank=True, max_length=1000, null=True)),
                ('classificacao', models.CharField(blank=True, choices=[('Vermelho', 'Emergência'), ('Laranja', 'Muito Urgente'), ('Amarelo', 'Urgente'), ('Verde', 'Pouco Urgente'), ('Azul', 'Não Urgente')], max_length=50, null=True)),
                ('justificativa', models.CharField(blank=True, null=True)),
                ('encaminhamento', models.CharField(blank=True, choices=[('Clinica Medica', 'Clinica Medica'), ('Ortopedia', 'Ortopedia'), ('Pediatria', 'Pediatria'), ('Cardiologia', 'Cardiologia'), ('Neurologia', 'Neurologia')], max_length=50, null=True)),
                ('status', models.CharField(blank=True, choices=[('Aguardando', 'Aguardando'), ('Em atendimento', 'Em atendimento'), ('Concluido', 'Concluido')], default='Aguardando', max_length=20, null=True)),
                ('atendente', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pacientes_criados', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
